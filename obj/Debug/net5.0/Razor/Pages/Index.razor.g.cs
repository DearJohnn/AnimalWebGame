#pragma checksum "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1248bef3f202a33ae6827f75d509a82b3e697e55"
// <auto-generated/>
#pragma warning disable 1591
namespace AnimalWebGame.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\_Imports.razor"
using AnimalWebGame;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\_Imports.razor"
using AnimalWebGame.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\Pages\Index.razor"
using System.Timers;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, "<style>\r\n    .container {\r\n        width: 600px;\r\n    }\r\n\r\n    button {\r\n        width: 100px;\r\n        height: 100px;\r\n        font-size: 50px;\r\n    }\r\n</style>\r\n\r\n");
            __builder.OpenElement(1, "div");
            __builder.AddAttribute(2, "class", "container");
            __builder.OpenElement(3, "div");
            __builder.AddAttribute(4, "class", "row mt-2");
            __builder.AddMarkupContent(5, "<div class=\"col-sm-4\"><h3>Difficulty:</h3></div>\r\n        ");
            __builder.OpenElement(6, "div");
            __builder.AddAttribute(7, "class", "col-sm-8");
            __builder.OpenElement(8, "input");
            __builder.AddAttribute(9, "type", "range");
            __builder.AddAttribute(10, "step", "6");
            __builder.AddAttribute(11, "min", "12");
            __builder.AddAttribute(12, "max", "60");
            __builder.AddAttribute(13, "value", "24");
            __builder.AddAttribute(14, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.ChangeEventArgs>(this, 
#nullable restore
#line 22 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\Pages\Index.razor"
                                                                                 UpdateGrid

#line default
#line hidden
#nullable disable
            ));
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(15, "\r\n        \r\n    ");
            __builder.OpenElement(16, "div");
            __builder.AddAttribute(17, "class", "row mt-2");
#nullable restore
#line 27 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\Pages\Index.razor"
         for (var animalNumber = 0; animalNumber < numberOfGrids; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\Pages\Index.razor"
            var index = animalNumber;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\Pages\Index.razor"
            var x = animalNumber % 6;

#line default
#line hidden
#nullable disable
#nullable restore
#line 36 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\Pages\Index.razor"
            var y = animalNumber / 6;


#line default
#line hidden
#nullable disable
            __builder.OpenElement(18, "div");
            __builder.OpenElement(19, "button");
            __builder.AddAttribute(20, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 39 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\Pages\Index.razor"
                                    () => ButtonClick(animal, uniqueDescription, index, x, y)

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(21, "type", "button");
            __builder.AddAttribute(22, "class", "btn btn-outline-dark");
            __builder.OpenElement(23, "h1");
            __builder.AddContent(24, 
#nullable restore
#line 41 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\Pages\Index.razor"
                         animal

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
#nullable restore
#line 43 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\Pages\Index.razor"
                  }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(25, "\r\n        \r\n        ");
            __builder.OpenElement(26, "div");
            __builder.OpenElement(27, "h2");
            __builder.AddContent(28, "Matches found: ");
            __builder.AddContent(29, 
#nullable restore
#line 47 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\Pages\Index.razor"
                                matchesfound

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(30, "\r\n        \r\n        ");
            __builder.OpenElement(31, "div");
            __builder.OpenElement(32, "h2");
            __builder.AddContent(33, "Time: ");
            __builder.AddContent(34, 
#nullable restore
#line 51 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\Pages\Index.razor"
                       timeDisplay

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#nullable restore
#line 56 "D:\6308\C#\Week1\AnimalWebGame\AnimalWebGame\Pages\Index.razor"
          

        /*DRAFT

                Requirement A:

                    A countdown timer, once time runs out, the game is over.(fully implemented)

                Requirement B:

                    Use a Sliders control interface to control the difficulty of the game.The player can change the difficulty of the game by sliding the slider to adjust the
                    number of grids, adding or subtracting six grids at a time.(fully implemented)

                Requirement C:

                    Change the mechanics of the game so that only two neighboring animals can pair,
                    and add new mechanics that can exchange the position of two animals that are next
                    to each other.(needs improvement)

        */

        //The initial number of grids
        int numberOfGrids = 24;

        //The list of emojis uesd to create matching game
        List<string> animalEmoji = new List<string>()
{
        "🐶","🐶",
        "🐺","🐺",
        "🦄","🦄",
        "🦊","🦊",
        "🐱","🐱",
        "🦁","🦁",
        "🐻","🐻",
        "🐭","🐭",
        "🐵","🐵",
        "🦝","🦝",
        "🐰","🐰",
        "🐯","🐯",
        "🐮","🐮",
        "🐹","🐹",
        "🦚‍","🦚‍",
        "🐨‍","🐨‍",
        "🦍‍","🦍‍",
        "🐆‍","🐆‍",
        "🦧‍","🦧‍",
        "🐥‍","🐥‍",
        "🐧‍","🐧‍",
        "🦭‍","🦭‍",
        "🦉‍","🦉‍",
        "🦔‍","🦔‍",
        "🐼‍","🐼‍",
        "🐙‍","🐙‍",
        "🦦‍","🦦‍",
        "🦇‍","🦇‍",
        "🦥‍","🦥‍",
        "🦘","🦘",
        "🌸‍","🌸",
        "🐝‍","🐝",
        "🦋‍","🦋",
    };

        //Create a list used to store after random order
        List<string> shuffledAnimals = new List<string>();

        int matchesfound = 0;
        Timer timer;
        int tenthsOfSecondsElapsed;
        int timeRamaining = 600;
        string timeDisplay = "60.0s";

        //Initialize the game
        protected override void OnInitialized()
        {
            timer = new Timer(100);
            timer.Elapsed += Timer_Tick;
            SetUpGame();
        }

        //Build the game randomly again and initialize the score and timer
        private void SetUpGame()
        {
            List<string> setDifficulty = new List<string>(animalEmoji);
            int delete = 66 - numberOfGrids;
            setDifficulty.RemoveRange(numberOfGrids, delete);
            Random random = new Random();
            shuffledAnimals = setDifficulty
                .OrderBy(item => random.Next())
                .ToList();
            matchesfound = 0;
            tenthsOfSecondsElapsed = timeRamaining;
        }

        string lastAnimalFound = string.Empty;
        string lastDescription = string.Empty;
        // last button's index
        int lastIndex;
        // last button's vertical index
        int lastY;
        // last button's horizontal index
        int lastX;

        //Used to select the animal and test whether it is a match
        private void ButtonClick(string animal, string animalDescription, int index, int x, int y)
        {
            if (lastAnimalFound == string.Empty)
            {
                lastAnimalFound = animal;
                lastDescription = animalDescription;
                lastIndex = index;
                lastX = x;
                lastY = y;

                timer.Start();
            }
            else
            {
                //If the two selected cells are not the same and they are adjacent, they will be swapped
                if (lastAnimalFound != animal)
                {
                    lastAnimalFound = string.Empty;
                    //When the absolute value of the difference between the abscissa of two animals plus only the absolute value of the difference between the ordinate is equal to 1, the two animals are next to each other.
                    if (Math.Abs(lastX - x) + Math.Abs(lastY - y) == 1)
                    {
                        //created a temp string to store the last button and swapped the position of the last Index and the current Index button.
                        string temp = shuffledAnimals[lastIndex];
                        shuffledAnimals[lastIndex] = shuffledAnimals[index];
                        shuffledAnimals[index] = temp;


                        MatchCheck(index, lastIndex);

                        if (matchesfound == numberOfGrids / 2)
                        {
                            timer.Stop();
                            timeDisplay += " - Play Again?";
                            SetUpGame();
                        }
                    }

                }
                else if (animalDescription != lastDescription)
                {


                    lastAnimalFound = string.Empty;

                    shuffledAnimals = shuffledAnimals
                    .Select(a => a.Replace(animal, string.Empty))
                    .ToList();

                    UpdatePoints();

                    if (matchesfound == numberOfGrids / 2)
                    {
                        timer.Stop();
                        timeDisplay += " - Play Again?";
                        SetUpGame();
                    }

                }
                else
                {
                    lastAnimalFound = string.Empty;
                }
            }
        }
        //Keep updating the time of the game and converting the result to a string
        private void Timer_Tick(Object source, ElapsedEventArgs e)
        {
            InvokeAsync(() =>
            {
                //make the timer as a countdown timer
                tenthsOfSecondsElapsed--;
                timeDisplay = (tenthsOfSecondsElapsed / 10f).ToString("0.0s");
                //when time is out the game would be reset
                if (tenthsOfSecondsElapsed < 0)
                {
                    timer.Stop();
                    timeDisplay = "0.0s - Play Again?";
                    lastAnimalFound = string.Empty;
                    SetUpGame();
                }

                StateHasChanged();
            });
        }

        //Udpdate the new game difficulty level set by the player
        private void UpdateGrid(ChangeEventArgs e)
        {
            numberOfGrids = int.Parse(e.Value.ToString());
            SetUpGame();
        }

        private void UpdatePoints()
        {
            matchesfound++;

        }
        //Checks whether the current grid matches the grid to the right
        private void MatchRight(int r)
        {
            if (shuffledAnimals[r] == shuffledAnimals[r + 1] && shuffledAnimals[r] != string.Empty)
            {
                shuffledAnimals[r] = string.Empty;
                shuffledAnimals[r + 1] = string.Empty;
                UpdatePoints();
            }
        }
        //Checks whether the current grid matches the grid to the left
        private void MatchLeft(int l)
        {
            if (shuffledAnimals[l] == shuffledAnimals[l - 1] && shuffledAnimals[l] != string.Empty)
            {
                shuffledAnimals[l] = string.Empty;
                shuffledAnimals[l - 1] = string.Empty;
                UpdatePoints();
            }
        }
        //Checks whether the current grid matches the grid to the top
        private void MatchTop(int t)
        {
            if (shuffledAnimals[t] == shuffledAnimals[t - 6] && shuffledAnimals[t] != string.Empty)
            {
                shuffledAnimals[t] = string.Empty;
                shuffledAnimals[t - 6] = string.Empty;
                UpdatePoints();
            }
        }
        //Checks whether the current grid matches the grid to the bottom
        private void MatchBottom(int b)
        {
            if (shuffledAnimals[b] == shuffledAnimals[b + 6] && shuffledAnimals[b] != string.Empty)
            {
                shuffledAnimals[b] = string.Empty;
                shuffledAnimals[b + 6] = string.Empty;
                UpdatePoints();
            }
        }

        //Cover different corner cases when the grid move to the first or last 
        private void MatchCheck(int i, int j)
        {
            //when the grid move to the first only need to check right and bottom grid
            if (i == 0 || j == 0)
            {
                MatchRight(i);
                MatchBottom(i);
                MatchRight(j);
                MatchBottom(j);
            }
            //when the grid move to the last only need to check left and top grid
            else if (i == shuffledAnimals.Count - 1 || j == shuffledAnimals.Count - 1)
            {
                MatchLeft(i);
                MatchTop(i);
                MatchLeft(j);
                MatchTop(j);

            }
            //when the grid move to the top row only need to check left, right and bottom grid
            else if (i - 6 < 0 || j - 6 < 0)
            {
                MatchRight(i);
                MatchLeft(i);
                MatchBottom(i);
                MatchRight(j);
                MatchLeft(j);
                MatchBottom(j);
            }
            //when the grid move to the bottom row only need to check left, right and top grid
            else if (i + 6 > shuffledAnimals.Count - 1 || j + 6 > shuffledAnimals.Count - 1)
            {
                MatchRight(i);
                MatchLeft(i);
                MatchTop(i);
                MatchRight(j);
                MatchLeft(j);
                MatchTop(j);
            }
            else
            {
                MatchRight(i);
                MatchLeft(i);
                MatchTop(i);
                MatchBottom(i);
                MatchRight(j);
                MatchLeft(j);
                MatchTop(j);
                MatchBottom(j);
            }
        }
    

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
