@page "/"
@using System.Timers
<style>
    .container {
        width: 600px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

<div class="container">
    <div class="row mt-2">
        <div class="col-sm-4">
            <h3>Difficulty:</h3>
        </div>
        <div class="col-sm-8">

            <input type="range" step="6" min="12" max="60" value="24" @onchange="UpdateGrid" />
        </div>
    </div>
        <!--Create a grid for the game-->
        <div class="row mt-2">
            @for (var animalNumber = 0; animalNumber < numberOfGrids; animalNumber++)
            {
                var animal = shuffledAnimals[animalNumber];
                var uniqueDescription = $"Button #{animalNumber}";
                var index = animalNumber;
                var x = animalNumber % 6;
                var y = animalNumber / 6;

                <div>
                    <button @onclick="@(() => ButtonClick(animal, uniqueDescription, index, x, y))"
                            type="button" class="btn btn-outline-dark">
                        <h1>@animal</h1>
                    </button>
                </div>}
        </div>
        <!--score-->
        <div>
            <h2>Matches found: @matchesfound</h2>
        </div>
        <!--timer-->
        <div>
            <h2>Time: @timeDisplay</h2>
        </div>
    </div>


    @code{

        /*DRAFT

                Requirement A:

                    A countdown timer, once time runs out, the game is over.(fully implemented)

                Requirement B:

                    Use a Sliders controls interface to control the difficulty of the game.The player can change the difficulty of the game by sliding the slider to adjust the
                    number of grids, adding or subtracting six grids at a time.(fully implemented)

                Requirement C:

                    Change the mechanics of the game so that only two neighboring animals can pair,
                    and add new mechanics that can exchange the position of two animals that are next
                    to each other.(needs improvement)

        */

        int numberOfGrids = 24;

        //The list of emojis uesd to create matching game
        List<string> animalEmoji = new List<string>()
{
        "🐶","🐶",
        "🐺","🐺",
        "🦄","🦄",
        "🦊","🦊",
        "🐱","🐱",
        "🦁","🦁",
        "🐻","🐻",
        "🐭","🐭",
        "🐵","🐵",
        "🦝","🦝",
        "🐰","🐰",
        "🐯","🐯",
        "🐮","🐮",
        "🐹","🐹",
        "🦚‍","🦚‍",
        "🐨‍","🐨‍",
        "🦍‍","🦍‍",
        "🐆‍","🐆‍",
        "🦧‍","🦧‍",
        "🐥‍","🐥‍",
        "🐧‍","🐧‍",
        "🦭‍","🦭‍",
        "🦉‍","🦉‍",
        "🦔‍","🦔‍",
        "🐼‍","🐼‍",
        "🐙‍","🐙‍",
        "🦦‍","🦦‍",
        "🦇‍","🦇‍",
        "🦥‍","🦥‍",
        "🦘","🦘",
        "🌸‍","🌸",
        "🐝‍","🐝",
        "🦋‍","🦋",
    };

        //Create a list used to store after random order
        List<string> shuffledAnimals = new List<string>();

        int matchesfound = 0;
        Timer timer;
        int tenthsOfSecondsElapsed;
        int timeRamaining = 600;
        string timeDisplay = "60.0s";

        //Initialize the game
        protected override void OnInitialized()
        {
            timer = new Timer(100);
            timer.Elapsed += Timer_Tick;
            SetUpGame();
        }

        //Build the game randomly again and initialize the score and timer
        private void SetUpGame()
        {
            List<string> setDifficulty = new List<string>(animalEmoji);
            int delete = 66 - numberOfGrids;
            setDifficulty.RemoveRange(numberOfGrids, delete);
            Random random = new Random();
            shuffledAnimals = setDifficulty
                .OrderBy(item => random.Next())
                .ToList();
            matchesfound = 0;
            tenthsOfSecondsElapsed = timeRamaining;
        }

        string lastAnimalFound = string.Empty;
        string lastDescription = string.Empty;
        int lastIndex;
        int lastY;
        int lastX;

        //Used to select the animal and test whether it is a match
        private void ButtonClick(string animal, string animalDescription, int index, int x, int y)
        {
            if (lastAnimalFound == string.Empty)
            {
                lastAnimalFound = animal;
                lastDescription = animalDescription;
                lastIndex = index;
                lastX = x;
                lastY = y;

                timer.Start();
            }
            else
            {
                if (lastAnimalFound != animal)
                {
                    lastAnimalFound = string.Empty;

                    if (Math.Abs(lastX - x) + Math.Abs(lastY - y) == 1)
                    {
                        string temp = shuffledAnimals[lastIndex];
                        shuffledAnimals[lastIndex] = shuffledAnimals[index];
                        shuffledAnimals[index] = temp;


                        MatchCheck(index, lastIndex);

                        if (matchesfound == numberOfGrids / 2)
                        {
                            timer.Stop();
                            timeDisplay += " - Play Again?";
                            SetUpGame();
                        }
                    }

                }
                else if (animalDescription != lastDescription)
                {


                    lastAnimalFound = string.Empty;

                    shuffledAnimals = shuffledAnimals
                    .Select(a => a.Replace(animal, string.Empty))
                    .ToList();

                    UpdatePoints();

                    if (matchesfound == numberOfGrids / 2)
                    {
                        timer.Stop();
                        timeDisplay += " - Play Again?";
                        SetUpGame();
                    }

                }
                else
                {
                    lastAnimalFound = string.Empty;
                }
            }
        }
        //Keep updating the time of the game and converting the result to a string
        private void Timer_Tick(Object source, ElapsedEventArgs e)
        {
            InvokeAsync(() =>
            {
                tenthsOfSecondsElapsed--;
                timeDisplay = (tenthsOfSecondsElapsed / 10f).ToString("0.0s");

                if (tenthsOfSecondsElapsed < 0)
                {
                    timer.Stop();
                    timeDisplay = "0.0s - Play Again?";
                    lastAnimalFound = string.Empty;
                    SetUpGame();
                }

                StateHasChanged();
            });
        }
        private void UpdateGrid(ChangeEventArgs e)
        {
            numberOfGrids = int.Parse(e.Value.ToString());
            SetUpGame();
        }

        private void UpdatePoints()
        {
            matchesfound++;

        }

        private void MatchRight(int r)
        {
            if (shuffledAnimals[r] == shuffledAnimals[r + 1] && shuffledAnimals[r] != string.Empty)
            {
                shuffledAnimals[r] = string.Empty;
                shuffledAnimals[r + 1] = string.Empty;
                UpdatePoints();
            }
        }
        private void MatchLeft(int l)
        {
            if (shuffledAnimals[l] == shuffledAnimals[l - 1] && shuffledAnimals[l] != string.Empty)
            {
                shuffledAnimals[l] = string.Empty;
                shuffledAnimals[l - 1] = string.Empty;
                UpdatePoints();
            }
        }
        private void MatchTop(int t)
        {
            if (shuffledAnimals[t] == shuffledAnimals[t - 6] && shuffledAnimals[t] != string.Empty)
            {
                shuffledAnimals[t] = string.Empty;
                shuffledAnimals[t - 6] = string.Empty;
                UpdatePoints();
            }
        }
        private void MatchBottom(int b)
        {
            if (shuffledAnimals[b] == shuffledAnimals[b + 6] && shuffledAnimals[b] != string.Empty)
            {
                shuffledAnimals[b] = string.Empty;
                shuffledAnimals[b + 6] = string.Empty;
                UpdatePoints();
            }
        }

        private void MatchCheck(int i, int j)
        {
            if (i == 0 || j == 0)
            {
                MatchRight(i);
                MatchBottom(i);
                MatchRight(j);
                MatchBottom(j);
            }
            else if (i == shuffledAnimals.Count - 1 || j == shuffledAnimals.Count - 1)
            {
                MatchLeft(i);
                MatchTop(i);
                MatchLeft(j);
                MatchTop(j);

            }
            else if (i - 6 < 0 || j - 6 < 0)
            {
                MatchRight(i);
                MatchLeft(i);
                MatchBottom(i);
                MatchRight(j);
                MatchLeft(j);
                MatchBottom(j);
            }
            else if (i + 6 > shuffledAnimals.Count - 1 || j + 6 > shuffledAnimals.Count - 1)
            {
                MatchRight(i);
                MatchLeft(i);
                MatchTop(i);
                MatchRight(j);
                MatchLeft(j);
                MatchTop(j);
            }
            else
            {
                MatchRight(i);
                MatchLeft(i);
                MatchTop(i);
                MatchBottom(i);
                MatchRight(j);
                MatchLeft(j);
                MatchTop(j);
                MatchBottom(j);
            }
        }
    }
