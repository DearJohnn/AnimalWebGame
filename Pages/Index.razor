@page "/"
@using System.Timers
<style>
    .container {
        width: 600px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

<div class="container">
    <div class="row mb-3">

        <input type="range" step="6" min="6" max="60" value="24" @onchange="UpdateGrid" />
    </div>

    <!--Create a grid for the game-->
    <div class="row mt-2">
        @for (var animalNumber = 0; animalNumber < numberOfGrids; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";
            var index = animalNumber;

            <div>
                <button @onclick="@(() => ButtonClick(animal, uniqueDescription, index))"
                        type="button" class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>}
    </div>
    <!--score-->
    <div>
        <h2>Matches found: @matchesfound</h2>
    </div>
    <!--timer-->
    <div>
        <h2>Time: @timeDisplay</h2>
    </div>
</div>


@code{

    /*DRAFT

            Requirement A:

                A countdown timer, once time runs out, the game is over.(fully implemented)

            Requirement B:

                Use a Sliders controls interface to control the difficulty of the game.The player can change the difficulty of the game by sliding the slider to adjust the 
                number of grids, adding or subtracting six grids at a time.(fully implemented)

            Requirement C:

                a.Change the mechanics of the game so that only two neighboring animals can pair,
                and add new mechanics that can exchange the position of two animals that are next
                to each other.(needs improvement)

    */

    int numberOfGrids = 24;

    //The list of emojis uesd to create matching game
    List<string> animalEmoji = new List<string>()
{
        "🐶","🐶",
        "🐺","🐺",
        "🦄","🦄",
        "🦊","🦊",
        "🐱","🐱",
        "🦁","🦁",
        "🐻","🐻",
        "🐭","🐭",
        "🐵","🐵",
        "🦝","🦝",
        "🐰","🐰",
        "🐯","🐯",
        "🐮","🐮",
        "🐹","🐹",
        "🦚‍","🦚‍",
        "🐨‍","🐨‍",
        "🦍‍","🦍‍",
        "🐆‍","🐆‍",
        "🦧‍","🦧‍",
        "🐥‍","🐥‍",
        "🐧‍","🐧‍",
        "🦭‍","🦭‍",
        "🦉‍","🦉‍",
        "🦔‍","🦔‍",
        "🐼‍","🐼‍",
        "🐙‍","🐙‍",
        "🦦‍","🦦‍",
        "🦇‍","🦇‍",
        "🦥‍","🦥‍",
        "🦘","🦘",
        "🌸‍","🌸",
        "🐝‍","🐝",
        "🦋‍","🦋",
    };

    //Create a list used to store after random order
    List<string> shuffledAnimals = new List<string>();

    int matchesfound = 0;
    Timer timer;
    int tenthsOfSecondsElapsed;
    int timeRamaining = 600;
    string timeDisplay = "60.0s";

    //Initialize the game
    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;
        SetUpGame();
    }

    //Build the game randomly again and initialize the score and timer
    private void SetUpGame()
    {
        List<string> setDifficulty = new List<string>(animalEmoji);
        int delete = 66 - numberOfGrids;
        setDifficulty.RemoveRange(numberOfGrids, delete);
        Random random = new Random();
        shuffledAnimals = setDifficulty
            .OrderBy(item => random.Next())
            .ToList();
        matchesfound = 0;
        tenthsOfSecondsElapsed = timeRamaining;
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;
    int lastIndex = -1;

    //Used to select the animal and test whether it is a match
    private void ButtonClick(string animal, string animalDescription, int index)
    {
        if (lastAnimalFound == string.Empty)
        {
            lastAnimalFound = animal;
            lastDescription = animalDescription;
            lastIndex = index;

            timer.Start();
        }
        else
        {
            if (lastAnimalFound != animal)
            {
                lastAnimalFound = string.Empty;
                string temp = shuffledAnimals[lastIndex];
                shuffledAnimals[lastIndex] = shuffledAnimals[index];
                shuffledAnimals[index] = temp;

            }
            else if (animalDescription != lastDescription)
            {


                lastAnimalFound = string.Empty;

                shuffledAnimals = shuffledAnimals
                    .Select(a => a.Replace(animal, string.Empty))
                    .ToList();
                matchesfound++;
                if (matchesfound == numberOfGrids / 2)
                {
                    timer.Stop();
                    timeDisplay += " - Play Again?";
                    SetUpGame();
                }

            }
            else
            {
                lastAnimalFound = string.Empty;
            }
        }
        /*else if ((lastAnimalFound == animal) && (animalDescription != lastDescription))
        {
            lastAnimalFound = string.Empty;

            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();
            matchesfound++;
            if (matchesfound == numberOfGrids/2)
            {
                timer.Stop();
                timeDisplay += " - Play Again?";
                SetUpGame();
            }
        }
        else
        {
            lastAnimalFound = string.Empty;
        }*/
    }

    //Keep updating the time of the game and converting the result to a string
    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed--;
            timeDisplay = (tenthsOfSecondsElapsed / 10f).ToString("0.0s");

            if (tenthsOfSecondsElapsed < 0)
            {
                timer.Stop();
                timeDisplay = "0.0s - Play Again?";
                lastAnimalFound = string.Empty;
                SetUpGame();
            }

            StateHasChanged();
        });
    }
    private void UpdateGrid(ChangeEventArgs e)
    {
        numberOfGrids = int.Parse(e.Value.ToString());
        SetUpGame();
    }
}
