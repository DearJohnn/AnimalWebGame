@page "/"
@using System.Timers
<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

<div class="container">
    <!--Create a grid for the game-->
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";

            <div class="col-3">
                <button @onclick="@(() => ButtonClick(animal, uniqueDescription))"
                        type="button" class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>}
    </div>
    <!--score-->
    <div>
        <h2>Matches found: @matchesfound</h2>
    </div>
    <!--timer-->
    <div>
        <h2>Time: @timeDisplay</h2>
    </div>
</div>


@code{ 

    /*DRAFT
    
            Requirement A: 

                a.A countdown timer, once time runs out, the game is over. 
                b.Each successful match earns one point.

            Requirement B:

                Use a Button controls interface to control the difficulty of the game. There are five 
                levels represented by the numbers 5 to 10, which means the number of grids on the 
                side of the square.

            Requirement C:

                Change the mechanics of the game so that only two neighboring animals can pair, 
                and add new mechanics that can exchange the position of two animals that are next 
                to each other.

    */

    //The list of emojis uesd to create matching game
    List<string> animalEmoji = new List<string>()
        {
        "🐶","🐶",
        "🐺","🐺",
        "🦄","🦄",
        "🦊","🦊",
        "🐱","🐱",
        "🦁","🦁",
        "🐻","🐻",
        "🐭","🐭",
    };
    //Create a list used to store after random order
    List<string> shuffledAnimals = new List<string>();

    int matchesfound = 0;
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;

    //Initialize the game
    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;
        SetUpGame();
    }

    //Build the game randomly again and initialize the score and timer
    private void SetUpGame()
    {
        Random random = new Random();
        shuffledAnimals = animalEmoji
            .OrderBy(item => random.Next())
            .ToList();
        matchesfound = 0;
        tenthsOfSecondsElapsed = 0;
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;

    //Used to select the animal and test whether it is a match
    private void ButtonClick(string animal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            lastAnimalFound = animal;
            lastDescription = animalDescription;

            timer.Start();
        }
        else if ((lastAnimalFound == animal) && (animalDescription != lastDescription))
        {
            lastAnimalFound = string.Empty;

            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();
            matchesfound++;
            if(matchesfound == 8)
            {
                timer.Stop();
                timeDisplay += " - Play Again?";
                SetUpGame();
            }
        }
        else
        {
            lastAnimalFound = string.Empty;
        }
    }
    //Keep updating the time of the game and converting the result to a string
    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeDisplay = (tenthsOfSecondsElapsed / 10f)
                .ToString("0.0s");
            StateHasChanged();
        });
    }
    }
